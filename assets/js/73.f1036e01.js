(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{516:function(a,t,s){"use strict";s.r(t);var e=s(26),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"字节码增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节码增强"}},[a._v("#")]),a._v(" 字节码增强")]),a._v(" "),t("p",[a._v("在每个"),t("strong",[a._v("Sermant")]),a._v("插件的"),t("code",[a._v("插件主模块(plugin)")]),a._v("中，都可以声明一些增强逻辑，针对宿主应用的某些特定方法进行字节码增强，从而实现某种功能，因此描述好该增强什么类及类的方法是一个重要的课题。")]),a._v(" "),t("h2",{attrs:{id:"增强声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增强声明"}},[a._v("#")]),a._v(" 增强声明")]),a._v(" "),t("p",[a._v("插件开发中，需要在"),t("RouterLink",{attrs:{to:"/zh/document/developer-guide/package-structure.html#插件主模块"}},[a._v("插件主模块")]),a._v("中定义字节码增强的声明，声明插件字节码增强逻辑需要实现"),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/declarer/PluginDeclarer.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("PluginDeclarer"),t("OutboundLink")],1),a._v("接口，其中包含三个接口方法：")],1),a._v(" "),t("ul",[t("li",[t("code",[a._v("getClassMatcher")]),a._v("方法用于获取被增强类的匹配器"),t("a",{attrs:{href:"#%E7%B1%BB%E5%8C%B9%E9%85%8D%E5%99%A8"}},[a._v("ClassMatcher")]),a._v("。")]),a._v(" "),t("li",[t("code",[a._v("getInterceptDeclarers")]),a._v("方法用于获取被增强类的拦截方法的匹配器"),t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%8C%B9%E9%85%8D%E5%99%A8"}},[a._v("MethodMatcher")]),a._v("，以及为拦截点声明的拦截器"),t("a",{attrs:{href:"#%E6%8B%A6%E6%88%AA%E5%99%A8"}},[a._v("Interceptor")]),a._v("，他们封装于拦截声明"),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/declarer/InterceptDeclarer.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("InterceptDeclarer"),t("OutboundLink")],1),a._v("中。")]),a._v(" "),t("li",[t("code",[a._v("getSuperTpeDecarers")]),a._v("方法用于获取插件的超类声明"),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/declarer/SuperTypeDeclarer.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("SuperTypeDeclarer"),t("OutboundLink")],1)])]),a._v(" "),t("p",[a._v("实现完成后，需要添加"),t("code",[a._v("PluginDeclarer")]),a._v("接口的"),t("em",[a._v("SPI")]),a._v("配置文件：")]),a._v(" "),t("ul",[t("li",[a._v("在资源目录"),t("code",[a._v("resources")]),a._v("下添加"),t("code",[a._v("META-INF/services")]),a._v("文件夹。")]),a._v(" "),t("li",[a._v("在"),t("code",[a._v("META-INF/services")]),a._v("中添加"),t("code",[a._v("io.sermant.core.plugin.agent.declarer.PluginDeclarer")]),a._v("配置文件。")]),a._v(" "),t("li",[a._v("在上述文件中，以换行为分隔，键入插件包中所有的增强定义"),t("code",[a._v("PluginDeclarer")]),a._v("实现。")])]),a._v(" "),t("h2",{attrs:{id:"类匹配器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类匹配器"}},[a._v("#")]),a._v(" 类匹配器")]),a._v(" "),t("p",[a._v("对匹配器 "),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/matcher/ClassMatcher.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("ClassMatcher"),t("OutboundLink")],1),a._v("，在核心模块中提供了两种类型的匹配器：")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/matcher/ClassTypeMatcher.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("ClassTypeMatcher"),t("OutboundLink")],1),a._v("(类的类型匹配器)")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("完全通过名称匹配，也是最常见的定位方式，通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${class reference}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${class reference}")]),a._v("为被增强类的全限定名。")])]),a._v(" "),t("li",[t("p",[a._v("通过名称匹配多个类，属于"),t("code",[a._v("nameEquals")]),a._v("的复数版，可通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameContains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${class reference array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${class reference array}")]),a._v("为被增强类的全限定名可变数组。")])])]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/matcher/ClassFuzzyMatcher.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("ClassFuzzyMatcher"),t("OutboundLink")],1),a._v("（类的模糊匹配器）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("通过全限定名前缀定位到被增强类，可通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("namePrefixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${prefix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${prefix}")]),a._v("为全限定名前缀。")])]),a._v(" "),t("li",[t("p",[a._v("通过全限定名后缀定位到被增强类，可以通过一下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameSuffixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${suffix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${suffix}")]),a._v("为全限定名后缀。")])]),a._v(" "),t("li",[t("p",[a._v("通过全限定名内缀定位到被增强类，可以通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameinfixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${infix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${infix}")]),a._v("为全限定名内缀。")])]),a._v(" "),t("li",[t("p",[a._v("通过正则表达式匹配全限定名定位到被增强类，可以通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameMatches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${pattern}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${pattern}")]),a._v("为正则表达式。")])]),a._v(" "),t("li",[t("p",[a._v("通过注解定位到被该注解修饰的类，可通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isAnnotationWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${annotation reference array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${annotation reference array}")]),a._v("为注解的全限定名可变数组。")])]),a._v(" "),t("li",[t("p",[a._v("通过超类定位到该类的子类，可通过以下方法获取：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isExtendedFrom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${super class array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${super class array}")]),a._v("为超类可变数组。考虑到Java的继承规则，该数组只能有一个"),t("code",[a._v("Class")]),a._v("，其余必须全为"),t("code",[a._v("Interface")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("匹配的逻辑操作，匹配器全部不匹配时为真：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("not")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${class matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${class matcher array}")]),a._v("为匹配器可变长数组")])]),a._v(" "),t("li",[t("p",[a._v("匹配的逻辑操作，匹配器全部都匹配时为真：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("and")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${class matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${class matcher array}")]),a._v("为匹配器可变长数组")])]),a._v(" "),t("li",[t("p",[a._v("匹配的逻辑操作，匹配器其中一个匹配时为真：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("or")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${class matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${class matcher array}")]),a._v("为匹配器可变长数组")])])]),a._v(" "),t("h2",{attrs:{id:"方法匹配器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法匹配器"}},[a._v("#")]),a._v(" 方法匹配器")]),a._v(" "),t("p",[a._v("对于方法匹配器"),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/plugin/agent/matcher/MethodMatcher.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("MethodMatcher"),t("OutboundLink")],1),a._v("，提供了多种匹配方法：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("全数匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("名称匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${method name}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${method name}")]),a._v("为方法名称。")])]),a._v(" "),t("li",[t("p",[a._v("匹配静态方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isStaticMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("匹配构造函数：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isConstructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("匹配多个方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameContains")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${method name array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${method name array}")]),a._v("为方法名称数组。")])]),a._v(" "),t("li",[t("p",[a._v("根据方法名称前缀匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("namePrefixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${method name prefix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${method name prefix}")]),a._v("为方法名称前缀。")])]),a._v(" "),t("li",[t("p",[a._v("根据方法名称后缀匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameSuffixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${method name suffix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${method name suffix}")]),a._v("为方法名称后缀。")])]),a._v(" "),t("li",[t("p",[a._v("根据方法名称内缀匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameinfixedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${method name infix}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${method name infix}")]),a._v("为方法名称内缀。")])]),a._v(" "),t("li",[t("p",[a._v("根据正则表达式匹配：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nameMatches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${pattern}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${pattern}")]),a._v("为正则表达式。")])]),a._v(" "),t("li",[t("p",[a._v("匹配被传入注解修饰的方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isAnnotatedWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${annotations array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${annotations array}")]),a._v("为注解集。")])]),a._v(" "),t("li",[t("p",[a._v("匹配指定入参数量的方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("paramCountEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${param count}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${param count}")]),a._v("为入参数量。")])]),a._v(" "),t("li",[t("p",[a._v("匹配指定入参类型的方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("paramTypeEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${param type array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${param type array}")]),a._v("为入参类型集。")])]),a._v(" "),t("li",[t("p",[a._v("匹配指定返回值类型的方法：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resultTypeEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${result type}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${result type}")]),a._v("返回值类型。")])]),a._v(" "),t("li",[t("p",[a._v("逻辑操作，方法匹配器集全不匹配时则结果为真")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("not")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${element matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${element matcher array}")]),a._v("为方法匹配器集。")])]),a._v(" "),t("li",[t("p",[a._v("逻辑操作，方法匹配器集全匹配时则结果为真")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("and")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${element matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${element matcher array}")]),a._v("为方法匹配器集。")])]),a._v(" "),t("li",[t("p",[a._v("逻辑操作，方法匹配器集其中一个匹配时则结果为真")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MethodMatcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("or")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${element matcher array}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("${element matcher array}")]),a._v("为方法匹配器集。")])])]),a._v(" "),t("p",[a._v("更多方法匹配方式可以参考"),t("a",{attrs:{href:"https://javadoc.io/doc/net.bytebuddy/byte-buddy/latest/net/bytebuddy/matcher/ElementMatchers.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("byte-buddy"),t("OutboundLink")],1),a._v("中含"),t("code",[a._v("MethodDescription")]),a._v("泛型的方法。")]),a._v(" "),t("h3",{attrs:{id:"原生类增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原生类增强"}},[a._v("#")]),a._v(" 原生类增强")]),a._v(" "),t("p",[a._v("增强原生类和增强普通类在增强定义和拦截器编写上没有什么区别，但还是希望插件开发者尽量少地对原生类进行增强，原因有二：")]),a._v(" "),t("ul",[t("li",[a._v("对原生类进行增强可能导致不可预知的错误。因为原生类在开发过程中被广泛使用，对它们增强后可能会对使用到该类的其他插件或宿主功能造成影响。")]),a._v(" "),t("li",[a._v("对Sermant增强过程中使用的个别原生类方法进行增强可能会出现类循环依赖错误。比如Sermant类加载器在加载类的过程中会使用"),t("code",[a._v("java.net.URL")]),a._v("类，如果在插件中对URL类的构造方法进行增强，宿主应用挂载Agent启动后JVM抛出"),t("code",[a._v("ClassCircularityError")]),a._v("错误。")])]),a._v(" "),t("p",[a._v("综上，"),t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/tree/develop/sermant-agentcore/sermant-agentcore-core",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[a._v("Sermant")]),a._v("核心功能模块"),t("OutboundLink")],1),a._v("中提供对"),t("em",[a._v("Java")]),a._v("原生类增强的能力，但不建议不加限制地对他们进行增强，如果有多个增强点可选，优先考虑增强普通类。")]),a._v(" "),t("blockquote",[t("p",[a._v("我们在FAQ中的"),t("RouterLink",{attrs:{to:"/zh/document/faq/framework.html"}},[a._v("Sermant框架常见问题")]),a._v("里列举了已知的"),t("RouterLink",{attrs:{to:"/zh/document/faq/framework.html#sermant不支持对哪些原生类的增强"}},[a._v("Sermant不支持增强的原生类")]),a._v("。")],1)]),a._v(" "),t("h2",{attrs:{id:"拦截器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[a._v("#")]),a._v(" 拦截器")]),a._v(" "),t("p",[a._v("拦截器被用来定义对被增强类的增强逻辑。Sermant的拦截器提供了Before、After、Throw三个关键的生命周期，并在其上提供了形如跳过方法执行，修改方法参数，修改方法返回，修改异常抛出等通用能力。")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-god/src/main/java/io/sermant/core/plugin/agent/interceptor/Interceptor.java",target:"_blank",rel:"noopener noreferrer"}},[a._v("Interceptor"),t("OutboundLink")],1),a._v(": 拦截器接口，其中包含before、after和onThrow三个方法，分别对应于拦截器的三个生命周期。ExecuteContext参数为插件执行的上下文，里面封装拦截器运作所需的所有参数：\n"),t("ul",[t("li",[t("code",[a._v("before")]),a._v("，前置方法，对应拦截器Before生命周期。该方法在拦截点之前执行。可通过ExecuteContext参数执行修改方法入参、跳过拦截点宿主方法的执行等操作。注意，增强构造函数时，不能跳过构造方法的执行。")]),a._v(" "),t("li",[t("code",[a._v("after")]),a._v("，后置方法，对应拦截器After生命周期。after方法在拦截点运行结束后执行，在after方法中可以通过ExecuteContext参数修改方法的返回值。")]),a._v(" "),t("li",[t("code",[a._v("onThrow")]),a._v("，异常处理方法，对应拦截器Throw生命周期。该方法在拦截点抛出异常时才能触发执行，如果异常在拦截点方法中被捕获，则无法触发onThrow方法。在onThrow方法中可以通过ExecuteContext参数修改抛出的异常，如果将异常修改为null，此时方法将不再会抛出异常。")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);