(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{563:function(t,e,r){"use strict";r.r(e);var s=r(26),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基于sermant-istio的无代理服务网格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于sermant-istio的无代理服务网格"}},[t._v("#")]),t._v(" 基于Sermant+Istio的无代理服务网格")]),t._v(" "),e("p",[t._v("本文主要介绍基于Sermant+Istio无代理服务网格的概念、部署形态和具体能力。该能力基于Sermant框架层的"),e("a",{attrs:{href:"https://github.com/sermant-io/Sermant/blob/develop/sermant-agentcore/sermant-agentcore-core/src/main/java/io/sermant/core/service/xds/XdsCoreService.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("xDS核心服务"),e("OutboundLink")],1),t._v("实现。")]),t._v(" "),e("h2",{attrs:{id:"istio下的sermant服务治理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio下的sermant服务治理"}},[t._v("#")]),t._v(" Istio下的Sermant服务治理")]),t._v(" "),e("p",[t._v("服务网格（Service Mesh）是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。")]),t._v(" "),e("p",[t._v("Istio是目前应用最广泛的Service Mesh产品，由控制平面和数据平面组成。Istio的数据平面一般会启动独立的Sidecar容器代理业务微服务的网络，因此会增加额外的性能损耗，包括CPU占用增加和服务调用时延的大幅增长，除此之外，系统的复杂性和运维的难度也在增加。")]),t._v(" "),e("p",[t._v("Sermant xDS服务使微服务可以在Kubenetes场景下接入Istio。Sermant基于xDS协议和Istio的控制平面直接进行通信，获取服务发现、路由、负载均衡等配置信息，从而可以替代Envoy作为Istio的数据平面完成服务治理能力。")]),t._v(" "),e("p",[t._v("Sermant是基于Java Agent的云原生无代理服务网格，业务微服务挂载Sermant同进程运行，无需启动额外的Sidecar容器进行网络代理，可以大幅度降低应用的性能损耗和服务之间的调用时延。")]),t._v(" "),e("h3",{attrs:{id:"istio-sermant的sidecar无代理模式部署形态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio-sermant的sidecar无代理模式部署形态"}},[t._v("#")]),t._v(" Istio+Sermant的Sidecar无代理模式部署形态")]),t._v(" "),e("MyImage",{attrs:{src:"/docs-img/xds-deploy.jpg"}}),t._v(" "),e("ol",[e("li",[t._v("混合部署模式：Sidecar代理模式和Sidecar无代理模式共存。业务微服务通过混合部署模式接入Istio并实现服务治理能力，该模式可以避免修改已有的部署架构，仅新增服务使用Sidecar无代理模式。")]),t._v(" "),e("li",[t._v("无代理部署模式：所有的业务微服务均使用Sermant作为Istio的数据平面实现服务发现、路由、负载均衡等能力。Sermant可以替代Envoy提供的能力，当前已经支持了服务发现，未来功能将持续演进。")])]),t._v(" "),e("h3",{attrs:{id:"istio环境下使用sermant的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio环境下使用sermant的优势"}},[t._v("#")]),t._v(" Istio环境下使用Sermant的优势")]),t._v(" "),e("ol",[e("li",[t._v("Sermant和业务微服务同进程运行，无需启动额外的Sidecar容器，大幅减少网络调用时延和CPU损耗。")]),t._v(" "),e("li",[t._v("基于Sermant框架开发插件可以实现比Envoy更丰富的治理能力，可扩展性更强。")]),t._v(" "),e("li",[t._v("更低的架构复杂度可以带来更低的部署成本。")])]),t._v(" "),e("h2",{attrs:{id:"基于xds服务的服务发现能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于xds服务的服务发现能力"}},[t._v("#")]),t._v(" 基于xDS服务的服务发现能力")]),t._v(" "),e("p",[t._v("Kubenetes环境中，用户可以通过"),e("a",{attrs:{href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deployment"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://kubernetes.io/docs/concepts/services-networking/service/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Service"),e("OutboundLink")],1),t._v("自定义资源文件创建Pod和Service。Sermant框架层基于xDS协议实现了服务发现能力，插件可以调用xDS服务发现接口获取Kubenetes Service的服务实例，具体开发指导请参考"),e("RouterLink",{attrs:{to:"/zh/document/developer-guide/sermant-xds-service.html#基于xDS服务的服务发现"}},[t._v("基于xDS服务的服务发现开发指导")]),t._v("。")],1),t._v(" "),e("h3",{attrs:{id:"kubenetes创建pod和service模版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubenetes创建pod和service模版"}},[t._v("#")]),t._v(" Kubenetes创建Pod和Service模版")]),t._v(" "),e("p",[e("strong",[t._v("Deployment")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spring-test\n  labels:\n    app: spring-test\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: spring-test\n  template:\n    metadata:\n      labels:\n        app: spring-test\n    spec:\n      containers:\n      - name: spring-test\n        image: spring-test:1.0.0\n        ports:\n        - containerPort: 8003\n")])])]),e("p",[e("strong",[t._v("Service：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("apiVersion: v1\nkind: Service\nmetadata:\n  name: spring-test\nspec:\n  type: ClusterIP\n  ports:\n  - name: test\n    port: 8003\n    targetPort: 8003\n    protocol: TCP\n  selector:\n    app: spring-test\n")])])]),e("blockquote",[e("p",[t._v("说明：Sermant使用Service资源文件的"),e("code",[t._v("metadata.name")]),t._v("作为服务名称进行服务发现")])]),t._v(" "),e("h3",{attrs:{id:"支持xds服务发现能力的sermant插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持xds服务发现能力的sermant插件"}},[t._v("#")]),t._v(" 支持xDS服务发现能力的Sermant插件")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/zh/document/plugin/router.html#基于xDS协议的路由"}},[t._v("路由插件")])],1)]),t._v(" "),e("h2",{attrs:{id:"基于xds服务的路由能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于xds服务的路由能力"}},[t._v("#")]),t._v(" 基于xDS服务的路由能力")]),t._v(" "),e("p",[t._v("Sermant框架层基于xDS协议实现了路由配置的获取能力，插件可以调用xDS路由配置服务接口获取Kubenetes Service的路由配置。具体开发指导请参考"),e("RouterLink",{attrs:{to:"/zh/document/developer-guide/sermant-xds-service.html#基于xDS协议的路由配置服务"}},[t._v("基于xDS服务的路由配置服务开发指导")]),t._v("。")],1),t._v(" "),e("h3",{attrs:{id:"istio路由配置字段支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio路由配置字段支持"}},[t._v("#")]),t._v(" Istio路由配置字段支持")]),t._v(" "),e("p",[t._v("Istio通过下发"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/reference/config/networking/destination-rule/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DestinationRule"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VirtualService"),e("OutboundLink")],1),t._v(" 自定义资源文件下发路由配置。Sermant基于xDS协议和Istio的控制平面协议进行通信获取路由配置，具体支持的路由配置字段如下所示：")]),t._v(" "),e("p",[e("strong",[t._v("VirtualService")]),t._v("：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("支持字段")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("spec.hosts")]),t._v(" "),e("td",[t._v("路由的服务域名")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http")]),t._v(" "),e("td",[t._v("http路由配置")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.match")]),t._v(" "),e("td",[t._v("http路由匹配规则")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.match.headers")]),t._v(" "),e("td",[t._v("http路由header匹配规则，支持精确、前缀和正则匹配")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.match.uri")]),t._v(" "),e("td",[t._v("http路由路径匹配规则，支持精确、前缀和正则匹配")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.match.ignoreUriCase")]),t._v(" "),e("td",[t._v("http路由路径匹配忽略大小写")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route")]),t._v(" "),e("td",[t._v("http路由")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route.destination")]),t._v(" "),e("td",[t._v("http路由目标服务")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route.destination.host")]),t._v(" "),e("td",[t._v("http路由目标服务域名")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route.destination.subset")]),t._v(" "),e("td",[t._v("http路由目标服务子集")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route.destination.port.number")]),t._v(" "),e("td",[t._v("http路由目标服务端口")])]),t._v(" "),e("tr",[e("td",[t._v("spec.hosts.http.route.weight")]),t._v(" "),e("td",[t._v("http路由目标权重")])])])]),t._v(" "),e("p",[e("strong",[t._v("DestinationRule")]),t._v("：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("支持字段")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("spec.trafficPolicy")]),t._v(" "),e("td",[t._v("流量策略")])]),t._v(" "),e("tr",[e("td",[t._v("spec.trafficPolicy.loadBalancer")]),t._v(" "),e("td",[t._v("负载均衡策略")])]),t._v(" "),e("tr",[e("td",[t._v("spec.trafficPolicy.loadBalancer.localityLbSetting.enabled")]),t._v(" "),e("td",[t._v("同AZ路由配置")])])])]),t._v(" "),e("h3",{attrs:{id:"istio路由配置模版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio路由配置模版"}},[t._v("#")]),t._v(" Istio路由配置模版")]),t._v(" "),e("p",[e("strong",[t._v("VirtualService")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: spring-test-virtualservice\nspec:\n  hosts:\n  - spring-test\n  http:\n  - name: "v1-routes"\n    match:\n    - headers:\n        version:\n          exact: v1\n      uri:\n        exact: /test\n      ignoreUriCase: false\n    route:\n    - destination:\n        host: spring-test\n        subset: v1\n        port:\n          number: 8003\n      weight: 100\n  - name: "base-route"\n    route:\n    - destination:\n        host: spring-test\n        subset: base\n        port:\n          number: 8003\n')])])]),e("blockquote",[e("p",[t._v("描述：对于访问服务名称为spring-test的上游服务，存在如下路由规则：")]),t._v(" "),e("ol",[e("li",[t._v("http请求中存在version:v1的header，并且访问路径为/test，路由到spring-test的v1子集的8003端口")]),t._v(" "),e("li",[t._v("其他http请求路由到spring-test的base子集的8003端口")])])]),t._v(" "),e("p",[e("strong",[t._v("DestinationRule")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: spring-test-destinationrule\nspec:\n  host: spring-test.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n    trafficPolicy:\n      loadBalancer:\n        localityLbSetting:\n          enabled: true\n  subsets:\n  - name: base\n    labels:\n      version: base\n    trafficPolicy:\n      loadBalancer:\n        localityLbSetting:\n          enabled: false\n")])])]),e("blockquote",[e("p",[t._v("描述：spring-test服务根据version标签划分为两个子集，即服务的两个Cluster集群。v1集群使用同AZ路由策略，v2集群不使用同AZ路由策略。")])]),t._v(" "),e("h3",{attrs:{id:"支持xds路由配置能力的sermant插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持xds路由配置能力的sermant插件"}},[t._v("#")]),t._v(" 支持xDS路由配置能力的Sermant插件")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/zh/document/plugin/router.html#基于xDS协议的路由"}},[t._v("路由插件")])],1)]),t._v(" "),e("h2",{attrs:{id:"基于xds服务的负载均衡能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于xds服务的负载均衡能力"}},[t._v("#")]),t._v(" 基于xDS服务的负载均衡能力")]),t._v(" "),e("p",[t._v("Sermant框架层基于xDS协议实现了负载均衡配置的获取能力，插件可以调用xDS负载均衡配置服务接口获取Kubenetes Service的负载均衡配置。具体开发指导请参考"),e("RouterLink",{attrs:{to:"/zh/document/developer-guide/sermant-xds-service.html#基于xDS协议的负载均衡配置服务"}},[t._v("基于xDS服务的负载均衡配置服务开发指导")]),t._v("。")],1),t._v(" "),e("h3",{attrs:{id:"istio负载均衡配置字段支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio负载均衡配置字段支持"}},[t._v("#")]),t._v(" Istio负载均衡配置字段支持")]),t._v(" "),e("p",[t._v("Istio通过下发"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/reference/config/networking/destination-rule/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DestinationRule"),e("OutboundLink")],1),t._v("自定义资源文件下发负载均衡配置。Sermant基于xDS协议和Istio的控制平面协议进行通信获取负载均衡配置，具体支持的负载均衡配置字段和负载均衡规则如下所示：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("支持字段")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("spec.trafficPolicy")]),t._v(" "),e("td",[t._v("流量策略")])]),t._v(" "),e("tr",[e("td",[t._v("spec.trafficPolicy.loadBalancer")]),t._v(" "),e("td",[t._v("负载均衡策略")])]),t._v(" "),e("tr",[e("td",[t._v("spec.trafficPolicy.loadBalancer.simple")]),t._v(" "),e("td",[t._v("简单负载均衡策略，支持ROUND_ROBIN、RANDOM、LEAST_REQUEST")])])])]),t._v(" "),e("h3",{attrs:{id:"istio负载均衡配置模版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#istio负载均衡配置模版"}},[t._v("#")]),t._v(" Istio负载均衡配置模版")]),t._v(" "),e("p",[e("strong",[t._v("DestinationRule")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: spring-test-destinationrule\nspec:\n  host: spring-test.default.svc.cluster.local\n  trafficPolicy:\n    loadBalancer:\n      simple: ROUND_ROBIN\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n    trafficPolicy:\n      loadBalancer:\n        simple: RANDOM\n  subsets:\n  - name: base\n    labels:\n      version: base\n")])])]),e("blockquote",[e("p",[t._v("描述：spring-test服务根据version标签划分为两个子集，即服务的两个Cluster集群。v1集群使用随机负载均衡策略，v2集群使用轮训负载均衡策略。")])]),t._v(" "),e("h3",{attrs:{id:"支持xds负载均衡配置能力的sermant插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持xds负载均衡配置能力的sermant插件"}},[t._v("#")]),t._v(" 支持xDS负载均衡配置能力的Sermant插件")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/zh/document/plugin/router.html#基于xDS协议的路由"}},[t._v("路由插件")])],1)]),t._v(" "),e("h2",{attrs:{id:"支持版本和限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持版本和限制"}},[t._v("#")]),t._v(" 支持版本和限制")]),t._v(" "),e("h3",{attrs:{id:"版本支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本支持"}},[t._v("#")]),t._v(" 版本支持")]),t._v(" "),e("p",[t._v("Istio版本：1.6版本及以上")]),t._v(" "),e("p",[t._v("Kubenetes版本和Istio的版本适配请参考"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/releases/supported-releases/#support-status-of-istio-releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Istio版本支持"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#限制"}},[t._v("#")]),t._v(" 限制")]),t._v(" "),e("p",[t._v("Sermant是基于Java Agent的云原生无代理服务网格，仅支持Java语言。")]),t._v(" "),e("h2",{attrs:{id:"启动和结果验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动和结果验证"}},[t._v("#")]),t._v(" 启动和结果验证")]),t._v(" "),e("h3",{attrs:{id:"基于xds服务的服务发现示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于xds服务的服务发现示例"}},[t._v("#")]),t._v(" 基于xds服务的服务发现示例")]),t._v(" "),e("p",[t._v("本教程使用"),e("a",{attrs:{href:"https://github.com/sermant-io/Sermant-examples/tree/main/xds-service-discovery-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sermant-examples"),e("OutboundLink")],1),t._v("仓库中的xds-service-discovery-demo演示Sermant的xDS服务发现能力。本Demo中包括spring-client微服务、spring-server微服务和Sermant示例插件，该插件拦截spring-client的"),e("code",[t._v("hello")]),t._v("方法，在"),e("code",[t._v("hello")]),t._v("方法执行前通过Sermant的xDS服务发现能力获取spring-server服务的具体实例信息，并替换入参为正确的sprng-server地址。")]),t._v(" "),e("h4",{attrs:{id:"_1-准备工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作"}},[t._v("#")]),t._v(" 1 准备工作")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/sermant-io/Sermant-examples/releases/download/v2.1.0/sermant-examples-xds-service-discovery-demo-2.1.0.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),e("OutboundLink")],1),t._v(" Demo二进制产物压缩包")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/tutorials/hello-minikube/",target:"_blank",rel:"noopener noreferrer"}},[t._v("准备"),e("OutboundLink")],1),t._v(" Kubenetes环境")]),t._v(" "),e("li",[t._v("安装"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/setup/getting-started/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Istio"),e("OutboundLink")],1),t._v("并启动")])]),t._v(" "),e("h4",{attrs:{id:"_2-获取demo二进制产物"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取demo二进制产物"}},[t._v("#")]),t._v(" 2 获取Demo二进制产物")]),t._v(" "),e("p",[t._v("解压Demo二进制产物压缩包，即可得到"),e("code",[t._v("product/")]),t._v("目录文件。")]),t._v(" "),e("h4",{attrs:{id:"_3-启动spring-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-启动spring-server"}},[t._v("#")]),t._v(" 3 启动spring-server")]),t._v(" "),e("p",[t._v("进入product/spring-server目录：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("执行以下命令打包spring-server镜像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sh build-server.sh\n")])])])]),t._v(" "),e("li",[e("p",[t._v("执行以下命令运行spring-server Pod和Service")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f spring-server.yaml\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"_4-启动spring-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动spring-client"}},[t._v("#")]),t._v(" 4 启动spring-client")]),t._v(" "),e("p",[t._v("进入product/spring-client目录：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("执行以下命令打包spring-client镜像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sh build-client.sh\n")])])])]),t._v(" "),e("li",[e("p",[t._v("执行以下命令运行spring-client Pod和Service")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f spring-client.yaml\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"_5-验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-验证"}},[t._v("#")]),t._v(" 5 验证")]),t._v(" "),e("p",[t._v("通过网页访问spring-client微服务，入参address设置为空，验证Sermant是否能成功调用上游服务spring-server：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://127.0.0.1:30110/hello?address=\n")])])]),e("p",[t._v("网页收到如下显示，说明Sermant成功发现了spring-server的实例并修改了入参address为正确的spring-server实例地址：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Greetings from http://xxx.xxx.xxx.xxx:8080 : hello, the current time is 2050-01-01T02:08:08.369\n")])])]),e("h3",{attrs:{id:"基于xds服务的路由示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于xds服务的路由示例"}},[t._v("#")]),t._v(" 基于xds服务的路由示例")]),t._v(" "),e("p",[t._v("本教程使用"),e("a",{attrs:{href:"https://github.com/sermant-io/Sermant-examples/tree/main/xds-router-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sermant-examples"),e("OutboundLink")],1),t._v("仓库中的xds-router-demo演示Sermant 基于xDS服务的路由能力。本Demo中包括spring-client微服务、spring-server微服务。spring-client微服务挂载Sermant的路由插件启动，并开启基于xDS的路由能力，Sermant路由插件在spring-client调用上游服务时，根据上游服务的路由规则进行路由，并选择符合规则的服务实例进行调用。")]),t._v(" "),e("h4",{attrs:{id:"_1-准备工作-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作-2"}},[t._v("#")]),t._v(" 1 准备工作")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/sermant-io/Sermant-examples/releases/download/v2.1.0/sermant-examples-xds-router-demo-2.1.0.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),e("OutboundLink")],1),t._v(" Demo二进制产物压缩包")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/sermant-io/Sermant/releases/download/v2.1.0/sermant-2.1.0.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),e("OutboundLink")],1),t._v(" Sermant二进制产物压缩包")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/tutorials/hello-minikube/",target:"_blank",rel:"noopener noreferrer"}},[t._v("准备"),e("OutboundLink")],1),t._v(" Kubenetes环境")]),t._v(" "),e("li",[t._v("安装"),e("a",{attrs:{href:"https://istio.io/latest/zh/docs/setup/getting-started/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Istio"),e("OutboundLink")],1),t._v("并启动")])]),t._v(" "),e("h4",{attrs:{id:"_2-获取demo二进制产物-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取demo二进制产物-2"}},[t._v("#")]),t._v(" 2 获取Demo二进制产物")]),t._v(" "),e("p",[t._v("解压Demo二进制产物压缩包，即可得到"),e("code",[t._v("router-product/")]),t._v("目录文件。")]),t._v(" "),e("h4",{attrs:{id:"_3-获取和移动sermant二进制产物"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-获取和移动sermant二进制产物"}},[t._v("#")]),t._v(" 3 获取和移动Sermant二进制产物")]),t._v(" "),e("p",[t._v("解压Sermant二进制产物压缩包，即可得到"),e("code",[t._v("sermant-agent/")]),t._v("目录文件。")]),t._v(" "),e("p",[t._v("执行如下命令，将Sermant二进制产物移动至spring-client目录，用于打包spring-client镜像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cp -r ${sermant-path}/sermant-agent/agent ${demo-path}/router-product/spring-client\n")])])]),e("blockquote",[e("p",[t._v("说明：${sermant-path}为Sermant二进制产物所在路径，${demo-path}为Demo二进制产物所在路径。")])]),t._v(" "),e("h4",{attrs:{id:"_4-启动spring-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动spring-server"}},[t._v("#")]),t._v(" 4 启动spring-server")]),t._v(" "),e("p",[t._v("进入router-product/spring-server目录：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("执行以下命令打包spring-server镜像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sh build-server.sh\n")])])])]),t._v(" "),e("li",[e("p",[t._v("执行以下命令运行spring-server Pod和Service")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f ../script/spring-server.yaml\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"_5-启动spring-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-启动spring-client"}},[t._v("#")]),t._v(" 5 启动spring-client")]),t._v(" "),e("p",[t._v("进入product/spring-client目录：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("执行以下命令打包spring-client镜像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sh build-client.sh\n")])])])]),t._v(" "),e("li",[e("p",[t._v("执行以下命令运行spring-client Pod和Service")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f ../script/spring-client.yaml\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"_6-下发路由规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-下发路由规则"}},[t._v("#")]),t._v(" 6 下发路由规则")]),t._v(" "),e("p",[t._v("进入product/script目录，执行如下命令下发路由规则：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f spring-server-destination.yaml\nkubectl apply -f spring-server-virtureservice.yaml\n")])])]),e("blockquote",[e("p",[t._v("路由规则说明：")]),t._v(" "),e("p",[t._v("DestinationRule: 根据Deployment的version标签将Pod划分为v1和v2两个子集, spring-server集群使用ROUND_ROBIN负载均衡规则。")]),t._v(" "),e("p",[t._v("VirtualService: 对于访问spring-server服务的http请求，如果存在version:v1的header，并且请求路径为/router，则将请求路由到spring-server的v1子集。")])]),t._v(" "),e("h4",{attrs:{id:"_7-验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-验证"}},[t._v("#")]),t._v(" 7 验证")]),t._v(" "),e("p",[t._v("通过网页访问spring-client微服务，入参host设置为spring-server，version为v1，验证spring-client服务是否能成功调用v1版本的上游服务spring-server：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://127.0.0.1:30110/router/httpClient?host=spring-server&version=v1\n")])])]),e("p",[t._v("网页收到如下显示，说明spring-client成功调用了v1版本的spring-server服务")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("spring-server version: v1\n")])])]),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])],1)}),[],!1,null,null,null);e.default=a.exports}}]);