(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{531:function(t,e,a){"use strict";a.r(e);var s=a(26),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http-server服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-server服务"}},[t._v("#")]),t._v(" HTTP Server服务")]),t._v(" "),e("p",[t._v("本文介绍如何在 Sermant 插件中实现HTTP API的开发。")]),t._v(" "),e("h2",{attrs:{id:"功能介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能介绍"}},[t._v("#")]),t._v(" 功能介绍")]),t._v(" "),e("p",[t._v("Sermant 提供了内置的 HTTP Server 功能，允许开发者在插件中通过简单的配置和实现相关接口，快速搭建起可以对外提供 HTTP 接口的服务。此功能使得外部系统可以访问这些接口，实现数据的交互和处理。HTTP Server 支持常见的 HTTP 方法，如 GET、POST、PUT、DELETE 等，使得开发者能够根据不同的业务需求，灵活地设计和实现功能，比如实现健康检查接口、监控指标、服务状态切换等功能。")]),t._v(" "),e("h2",{attrs:{id:"开发示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发示例"}},[t._v("#")]),t._v(" 开发示例")]),t._v(" "),e("p",[t._v("以下是一个开发示例，展示了如何在 Sermant 框架中利用 HTTP Server 功能，在插件中开发一个 HTTP API：")]),t._v(" "),e("ol",[e("li",[t._v("实现 "),e("code",[t._v("HttpRouteHandler")]),t._v(" 接口，并在实现类上添加 "),e("code",[t._v("@HttpRouteMapping")]),t._v(" 注解来指定路由信息。以下是一个具体的示例：")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HttpRouteMapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/health"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HealthHttpRouteHandler")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpRouteHandler")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUCCESS_CODE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpRequest")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpResponse")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置响应状态码")]),t._v("\n        response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatus")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUCCESS_CODE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置响应内容类型")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setContentType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/json;charset=utf-8"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入响应体")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeBody")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在此示例中，我们创建了一个 "),e("code",[t._v("HealthHttpRouteHandler")]),t._v(" 类，并通过 "),e("code",[t._v("@HttpRouteMapping")]),t._v(" 注解映射到 "),e("code",[t._v("/{package.plugin.name}/health")]),t._v(" 路径，仅接受 GET 方法。在 "),e("code",[t._v("handle")]),t._v(" 方法中，设置了响应的状态码、内容类型和响应体。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("开启 HTTP 服务，在"),e("code",[t._v("agent/config/config.properties")]),t._v("文件中设置开启HTTP服务，配置如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# HTTP server switch\nagent.service.httpserver.enable=true\n")])])])]),t._v(" "),e("li",[e("p",[t._v("通过以下 URL 可以访问 API："),e("code",[t._v("http://localhost:47128/{package.plugin.name}/health")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意："),e("code",[t._v("{package.plugin.name}")]),t._v(" 是当前 HTTP API 所在插件的名称，例如在插件 "),e("code",[t._v("service-router")]),t._v(" 插件中新增一个健康检查 HTTP API，则最终的请求路径为："),e("code",[t._v("http://localhost:47128/service-router/health")])])]),t._v(" "),e("h2",{attrs:{id:"api-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api-配置"}},[t._v("#")]),t._v(" API & 配置")]),t._v(" "),e("h3",{attrs:{id:"api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),e("p",[e("code",[t._v("HttpRequest")]),t._v(" 接口提供了丰富的方法来获取请求的详细信息，包括请求的 URI、路径、方法、内容类型、IP 地址、请求头、查询参数和请求体。以下是 "),e("code",[t._v("HttpRequest")]),t._v(" 接口的一些关键方法：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("getUri()")]),t._v(": 获取请求的 URI 对象。")]),t._v(" "),e("li",[e("code",[t._v("getPath()")]),t._v(": 获取解析后的请求路径。")]),t._v(" "),e("li",[e("code",[t._v("getMethod()")]),t._v(": 获取 HTTP 方法。")]),t._v(" "),e("li",[e("code",[t._v("getContentType()")]),t._v(": 获取请求的内容类型。")]),t._v(" "),e("li",[e("code",[t._v("getIp()")]),t._v(": 获取请求的 IP 地址。")]),t._v(" "),e("li",[e("code",[t._v("getFirstHeader(String name)")]),t._v(": 获取指定名称的请求头的第一个值。")]),t._v(" "),e("li",[e("code",[t._v("getParams()")]),t._v(": 获取所有查询参数。")]),t._v(" "),e("li",[e("code",[t._v("getBody()")]),t._v(": 获取请求体内容。")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("p",[e("code",[t._v("HttpResponse")]),t._v(" 接口则用于构建和发送 HTTP 响应，提供了设置状态码、响应头、内容类型和写入响应体的方法：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("setStatus(int status)")]),t._v(": 设置响应状态码。")]),t._v(" "),e("li",[e("code",[t._v("addHeader(String name, String value)")]),t._v(": 添加响应头。")]),t._v(" "),e("li",[e("code",[t._v("setContentType(String contentType)")]),t._v(": 设置响应内容类型。")]),t._v(" "),e("li",[e("code",[t._v("writeBody(String str)")]),t._v(": 写入字符串作为响应体。")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("h3",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("p",[t._v("Sermant 的 HTTP Server 功能可以通过以下配置项进行配置：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("agent.service.httpserver.enable")]),t._v(": HTTP Server 开关，默认关闭；")]),t._v(" "),e("li",[e("code",[t._v("httpserver.type")]),t._v(": 指定 HTTP Server 的类型，默认为 "),e("code",[t._v("simple")]),t._v("，使用 JDK 内置的 HTTP Server；")]),t._v(" "),e("li",[e("code",[t._v("httpserver.port")]),t._v(": 指定 HTTP Server 监听的端口号，默认为 "),e("code",[t._v("47128")]),t._v("；")]),t._v(" "),e("li",[e("code",[t._v("httpserver.serverCorePoolSize")]),t._v(": 指定 HTTP Server 线程池的核心线程数，默认为当前 CPU 的核数；")]),t._v(" "),e("li",[e("code",[t._v("httpserver.serverMaxPoolSize")]),t._v(": 指定 HTTP Server 线程池的最大线程数，默认为当前 CPU 的核数。\n以下是一个配置示例：")])]),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HTTP 服务开关")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("agent.service.httpserver.enable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 JDK 内置的 Http Server")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("httpserver.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("simple")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监听端口")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("httpserver.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("8080")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 线程池核心线程数")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("httpserver.serverCorePoolSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 线程池最大线程数")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("httpserver.serverMaxPoolSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("20")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);